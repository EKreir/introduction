package fr.eliess;

import fr.eliess.dao.CourseDAO;
import fr.eliess.dao.StudentDAO;
import fr.eliess.dao.TeacherDAO;
import fr.eliess.model.Course;
import fr.eliess.model.Student;
import fr.eliess.model.StudentProfile;
import fr.eliess.model.Teacher;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.stream.Collectors;

public class Main {

    private static final Logger logger = LoggerFactory.getLogger(Main.class);

    public static void main(String[] args) {

        // Code pr√©c√©dent temporairement d√©sactiv√© de la connexion √† MySQL sans JPA / Hibernate
        /*
        System.out.println("Bienvenue dans le projet Maven!");
        System.out.println("Driver MySQL : " + Driver.class.getName());

        GestionEleves gestion = new GestionEleves();
        gestion.demarrer();

        try (Connection conn = ConnexionBDD.getConnexion()) {
            System.out.println("Connexion r√©ussie !");
        } catch (SQLException e) {
            System.err.println("Erreur : " + e.getMessage());
        }
        */

        logger.info("üîß Chargement du fichier persistence.xml : {}",
                Main.class.getClassLoader().getResource("META-INF/persistence.xml"));

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("studentPU");
        EntityManager em = emf.createEntityManager();

        StudentDAO studentDAO = new StudentDAO(em);
        CourseDAO courseDAO = new CourseDAO(em);
        TeacherDAO teacherDAO = new TeacherDAO(em);

        var tx = em.getTransaction();

        try {
            tx.begin(); // Une seule transaction pour tout

            // =========================
            // 1Ô∏è‚É£ Cr√©ation des profils et √©tudiants
            // =========================
            StudentProfile profileRayan = new StudentProfile("123 Rue Principale", "0601020304");
            StudentProfile profileFahd = new StudentProfile("456 Avenue Centrale", "0605060708");

            Student rayan = new Student("Rayan", 18);
            rayan.setProfile(profileRayan);
            profileRayan.setStudent(rayan);

            Student fahd = new Student("Fahd", 24);
            fahd.setProfile(profileFahd);
            profileFahd.setStudent(fahd);

            // =========================
            // 2Ô∏è‚É£ Cr√©ation des cours et du professeur
            // =========================
            Course maths = new Course("Maths");
            Course physics = new Course("Physique");

            Teacher mrSmith = new Teacher("Mr. Smith");
            mrSmith.addCourse(maths);
            mrSmith.addCourse(physics);

            // =========================
            // 3Ô∏è‚É£ Associations √©tudiants ‚Üî cours
            // =========================
            rayan.addCourse(maths);
            rayan.addCourse(physics);
            fahd.addCourse(physics);

            // =========================
            // 4Ô∏è‚É£ Persistance
            // =========================
            teacherDAO.create(mrSmith);
            studentDAO.create(rayan);
            studentDAO.create(fahd);

            // =========================
            // 5Ô∏è‚É£ Modification : profil de Rayan + ajout d'un cours
            // =========================
            rayan.getProfile().setAddress("999 Nouvelle Adresse");
            rayan.getProfile().setPhone("0611223344");

            Course english = new Course("Anglais");
            rayan.addCourse(english);
            courseDAO.create(english);

            // =========================
            // 6Ô∏è‚É£ Affichage final
            // =========================
            displayAllStudents(studentDAO);
            displayTeacherWithCourses(teacherDAO, mrSmith.getId());

            tx.commit(); // commit unique pour tout le bloc
            logger.info("üíæ Toutes les op√©rations effectu√©es avec succ√®s");

        } catch (Exception e) {
            logger.error("‚ùå Erreur, rollback en cours", e);
            if (tx.isActive()) tx.rollback();
        } finally {
            em.close();
            emf.close();
            logger.info("üßπ EntityManager ferm√©");
        }
    }

    private static void displayAllStudents(StudentDAO studentDAO) {
        List<Student> students = studentDAO.findAllWithCourses();
        System.out.println("\nüìö Liste des √©tudiants :");
        for (Student s : students) {
            String profileInfo = (s.getProfile() != null)
                    ? s.getProfile().getAddress() + " | " + s.getProfile().getPhone()
                    : "aucun profil";
            String courses = s.getCourses().stream()
                    .map(Course::getTitle)
                    .collect(Collectors.joining(", "));
            System.out.println(s.getName() + " (Profil: " + profileInfo + ") suit : " +
                    (courses.isEmpty() ? "aucun cours" : courses));
        }
    }

    private static void displayTeacherWithCourses(TeacherDAO teacherDAO, Long teacherId) {
        Teacher teacher = teacherDAO.findWithCourses(teacherId);
        String courses = teacher.getCourses().stream()
                .map(Course::getTitle)
                .collect(Collectors.joining(", "));
        System.out.println("\nüë®‚Äçüè´ Professeur : " + teacher.getName());
        System.out.println("Enseigne : " + (courses.isEmpty() ? "aucun cours" : courses));
    }
}

    /*
    Requ√™te avec LEFT JOIN FETCH :
    SELECT DISTINCT s -> r√©cup√®re chaque Student une seule fois.
    LEFT JOIN FETCH s.courses -> r√©cup√®re les cours de chaque √©tudiant en m√™me temps, √©vitant le probl√®me N+1.
    R√©sultat : liste de Student avec leurs courses charg√©s en m√©moire.

    R√©cup√©ration et affichage des titres :
    s.getCourses().stream() -> parcourt tous les cours de l‚Äô√©tudiant.
    .map(Course::getTitle) -> extrait le titre de chaque cours.
    .reduce((a, b) -> a + ", " + b) -> concat√®ne tous les titres s√©par√©s par des virgules.
    .orElse("") -> si l‚Äô√©tudiant n‚Äôa aucun cours, renvoie une cha√Æne vide.
    System.out.println -> affiche la liste des titres.

    ================================================================

    Apr√®s modifications (ajout des cascades et suppression des m√©thodes addCourse() et addStudent()) :

    alice.getCourses().add(math);
    math.getStudents().add(alice);

    On met les 2 c√¥t√©s de la relation √† jour en m√©moire
    Hibernate va d√©tecter qu'on a modifi√© la relation
    et va g√©n√©rer les bonnes lignes dans la table de jointure student_course lors du commit().
    M√™me si on avait utilis√© tes m√©thodes addCourse / addStudent,
    le r√©sultat final dans la base de donn√©es aurait √©t√© identique.
    La diff√©rence est surtout dans la clart√© et la s√©curit√© du code.

    R√©sum√© des modifications :

    Les constructeurs personnalis√©s simplifient la cr√©ation d‚Äôobjets et rendent le code plus lisible.
    JPA/Hibernate utilise toujours le constructeur sans argument
    pour instancier les entit√©s depuis la base.
    Les changements c√¥t√© code ne changent pas le comportement final si la logique m√©tier
    et les relations sont respect√©es.

    ================================================================

    Points cl√©s

    Bidirectionnel One-to-One :
    Student garde profile_id (c√¥t√© propri√©taire).
    StudentProfile a mappedBy = "profile" pour naviguer vers l‚Äô√©tudiant.

    Liaisons mises √† jour avant persistance :
    alice.setProfile(profileAlice)
    profileAlice.setStudent(alice)

    Persistance s√©curis√©e :
    CascadeType.ALL sur le profile permet d‚Äôins√©rer le StudentProfile automatiquement.
    √âvite les NullPointerException lors de l‚Äôacc√®s √† getProfile().

    Affichage des profils et cours fonctionne correctement.

    =======================================================================

    Points importants

    Une seule transaction tx.begin() ‚Ä¶ tx.commit() pour toutes les op√©rations.

    Rollback si quelque chose √©choue.
    Les StudentProfile sont persist√©s automatiquement gr√¢ce √† cascade = CascadeType.ALL sur la relation One-to-One.

    Aucun flush() manuel n√©cessaire ici, Hibernate le fait au commit().

    =====================================================================

    On a simplifi√© les logs et les commentaires -> on garde juste l‚Äôessentiel.

    On a ajout√© profile.setStudent(student) pour bien relier les deux c√¥t√©s du OneToOne.

    On utilise tes m√©thodes utilitaires (addCourse, addCourse c√¥t√© prof) plut√¥t que de bricoler les deux c√¥t√©s √† la main.

    Avec √ßa, on devrait pouvoir voir clairement dans la console :

    chaque √©tudiant avec son profil et ses cours,

    le professeur avec ses cours.

    ======================================================================

    Points cl√©s de cette version :

    Une seule transaction tx.begin() -> tx.commit() pour tout : cr√©ation, modification et affichage.

    La persistance du nouveau cours se fait avec courseDAO.create(english)
    et JPA/Hibernate g√®re la liaison avec Rayan.

    Les m√©thodes utilitaires pour afficher √©tudiants et professeurs restent claires et r√©utilisables.

    Plus besoin de r√©cup√©rer Rayan depuis la DB avant de modifier son profil
     il est d√©j√† attach√© au EntityManager car cr√©√© dans la m√™me transaction.



    */
