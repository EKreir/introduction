package fr.eliess;

import com.mysql.cj.jdbc.Driver;
import fr.eliess.basics.GestionEleves;
import fr.eliess.dao.ConnexionBDD;
import fr.eliess.dao.CourseDAO;
import fr.eliess.dao.StudentDAO;
import fr.eliess.dao.TeacherDAO;
import fr.eliess.model.Course;
import fr.eliess.model.Student;
import fr.eliess.model.StudentProfile;
import fr.eliess.model.Teacher;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

public class Main {

    private static final Logger logger = LoggerFactory.getLogger(Main.class);


    public static void main(String[] args) {

        // Code pr√©c√©dent temporairement d√©sactiv√© de la connexion √† MySQL sans JPA / Hibernate
        /*
        System.out.println("Bienvenue dans le projet Maven!");
        System.out.println("Driver MySQL : " + Driver.class.getName());

        GestionEleves gestion = new GestionEleves();
        gestion.demarrer();

        try (Connection conn = ConnexionBDD.getConnexion()) {
            System.out.println("Connexion r√©ussie !");
        } catch (SQLException e) {
            System.err.println("Erreur : " + e.getMessage());
        }
        */

        // === TEST HIBERNATE / JPA ===
        logger.info("üîß Chargement du fichier persistence.xml : {}",
                Main.class.getClassLoader().getResource("META-INF/persistence.xml"));

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("studentPU");
        EntityManager em = emf.createEntityManager();

        // Instanciation des DAO
        StudentDAO studentDAO = new StudentDAO(em);
        CourseDAO courseDAO = new CourseDAO(em);
        TeacherDAO teacherDAO = new TeacherDAO(em);

        try {
            em.getTransaction().begin();

            // === Cr√©ation des profils √©tudiants ===
            StudentProfile profileAlice = new StudentProfile("123 Rue Principale", "0601020304");
            StudentProfile profileBob = new StudentProfile("456 Avenue Centrale", "0605060708");

            // === Cr√©ation des √©tudiants ===
            Student alice = new Student("Rayan", 18);
            alice.setProfile(profileAlice);

            Student bob = new Student("Fahd", 24);
            bob.setProfile(profileBob);

            // === Cr√©ation des cours ===
            Course math = new Course("Espagnol");
            Course physics = new Course("Technologie");

            // === Cr√©ation du professeur et association aux cours ===
            Teacher mrSmith = new Teacher("Mr. Smith");
            mrSmith.addCourse(math);
            mrSmith.addCourse(physics);

            // Persistance du professeur et des cours (cascade)
            teacherDAO.create(mrSmith);

            // === Lier √©tudiants aux cours ===
            alice.getCourses().add(math);
            math.getStudents().add(alice);

            alice.getCourses().add(physics);
            physics.getStudents().add(alice);

            bob.getCourses().add(math);
            math.getStudents().add(bob);

            // Persistance des √©tudiants (profile inclus via @Embedded)
            studentDAO.create(alice);
            studentDAO.create(bob);

            // Flush pour synchroniser la DB et √©viter les NPE
            em.flush();

            // === Affichage des √©tudiants avec profils et cours ===
            List<Student> students = studentDAO.findAllWithCourses();
            for (Student s : students) {
                String profileInfo = (s.getProfile() != null)
                        ? s.getProfile().getAddress() + ", " + s.getProfile().getPhone()
                        : "aucun profil";
                System.out.print(s.getName() + " (Profil: " + profileInfo + ") suit les cours : ");
                String courseTitles = s.getCourses().stream()
                        .map(Course::getTitle)
                        .reduce((a, b) -> a + ", " + b)
                        .orElse("aucun cours");
                System.out.println(courseTitles);
            }

            // === Affichage du professeur et ses cours ===
            Teacher teacherFromDb = teacherDAO.findWithCourses(mrSmith.getId());
            System.out.println("\nProfesseur : " + teacherFromDb.getName());
            String teacherCourses = teacherFromDb.getCourses().stream()
                    .map(Course::getTitle)
                    .reduce((a, b) -> a + ", " + b)
                    .orElse("aucun cours");
            System.out.println("Enseigne les cours : " + teacherCourses);

            em.getTransaction().commit();

            logger.info("üíæ √âtudiants, profils, cours et professeur persist√©s avec succ√®s");

        } catch (Exception e) {
            logger.error("Une erreur est survenue", e);
            if (em.getTransaction().isActive()) em.getTransaction().rollback();
        } finally {
            em.close();
            emf.close();
            logger.info("üßπ Ressources EntityManager ferm√©es");
        }
    }

    /*
    Requ√™te avec LEFT JOIN FETCH :
    SELECT DISTINCT s -> r√©cup√®re chaque Student une seule fois.
    LEFT JOIN FETCH s.courses -> r√©cup√®re les cours de chaque √©tudiant en m√™me temps, √©vitant le probl√®me N+1.
    R√©sultat : liste de Student avec leurs courses charg√©s en m√©moire.

    R√©cup√©ration et affichage des titres :
    s.getCourses().stream() -> parcourt tous les cours de l‚Äô√©tudiant.
    .map(Course::getTitle) -> extrait le titre de chaque cours.
    .reduce((a, b) -> a + ", " + b) -> concat√®ne tous les titres s√©par√©s par des virgules.
    .orElse("") -> si l‚Äô√©tudiant n‚Äôa aucun cours, renvoie une cha√Æne vide.
    System.out.println -> affiche la liste des titres.

    ================================================================

    Apr√®s modifications (ajout des cascades et suppression des m√©thodes addCourse() et addStudent()) :

    alice.getCourses().add(math);
    math.getStudents().add(alice);

    On met les 2 c√¥t√©s de la relation √† jour en m√©moire
    Hibernate va d√©tecter qu'on a modifi√© la relation
    et va g√©n√©rer les bonnes lignes dans la table de jointure student_course lors du commit().
    M√™me si on avait utilis√© tes m√©thodes addCourse / addStudent,
    le r√©sultat final dans la base de donn√©es aurait √©t√© identique.
    La diff√©rence est surtout dans la clart√© et la s√©curit√© du code.

    R√©sum√© des modifications :

    Les constructeurs personnalis√©s simplifient la cr√©ation d‚Äôobjets et rendent le code plus lisible.
    JPA/Hibernate utilise toujours le constructeur sans argument
    pour instancier les entit√©s depuis la base.
    Les changements c√¥t√© code ne changent pas le comportement final si la logique m√©tier
    et les relations sont respect√©es.

    ================================================================



    */
}