package fr.eliess;

import fr.eliess.dao.CourseDAO;
import fr.eliess.dao.StudentDAO;
import fr.eliess.dao.TeacherDAO;
import fr.eliess.dto.CourseWithCountDTO;
import fr.eliess.model.Course;
import fr.eliess.model.Student;
import fr.eliess.model.StudentProfile;
import fr.eliess.model.Teacher;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.stream.Collectors;

public class Main {

    private static final Logger logger = LoggerFactory.getLogger(Main.class);

    public static void main(String[] args) {

        // Code pr√©c√©dent temporairement d√©sactiv√© de la connexion √† MySQL sans JPA / Hibernate
        /*
        System.out.println("Bienvenue dans le projet Maven!");
        System.out.println("Driver MySQL : " + Driver.class.getName());

        GestionEleves gestion = new GestionEleves();
        gestion.demarrer();

        try (Connection conn = ConnexionBDD.getConnexion()) {
            System.out.println("Connexion r√©ussie !");
        } catch (SQLException e) {
            System.err.println("Erreur : " + e.getMessage());
        }
        */

        logger.info("üîß Chargement du fichier persistence.xml : {}",
                Main.class.getClassLoader().getResource("META-INF/persistence.xml"));

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("studentPU");
        EntityManager em = emf.createEntityManager();

        StudentDAO studentDAO = new StudentDAO(em);
        CourseDAO courseDAO = new CourseDAO(em);
        TeacherDAO teacherDAO = new TeacherDAO(em);

        var tx = em.getTransaction();

        try {
            tx.begin(); // Une seule transaction pour tout

            // =========================
            //Ô∏è  Cr√©ation des profils et √©tudiants
            // =========================
            StudentProfile profileRayan = new StudentProfile("123 Rue Principale", "0601020304");
            StudentProfile profileFahd = new StudentProfile("456 Avenue Centrale", "0605060708");

            Student rayan = new Student("Rayan", 18);
            rayan.setProfile(profileRayan);
            profileRayan.setStudent(rayan);

            Student fahd = new Student("Fahd", 24);
            fahd.setProfile(profileFahd);
            profileFahd.setStudent(fahd);

            // =========================
            // Cr√©ation des cours et du professeur
            // =========================
            Course maths = new Course("Maths");
            Course physics = new Course("Physique");

            Teacher mrSmith = new Teacher("Mr. Smith");
            mrSmith.addCourse(maths);
            mrSmith.addCourse(physics);

            // =========================
            // Associations √©tudiants ‚Üî cours
            // =========================
            rayan.addCourse(maths);
            rayan.addCourse(physics);
            fahd.addCourse(physics);

            // =========================
            // Persistance
            // =========================
            teacherDAO.create(mrSmith);
            studentDAO.create(rayan);
            studentDAO.create(fahd);

            // =========================
            // Modification : profil de Rayan + ajout d'un cours
            // =========================
            rayan.getProfile().setAddress("999 Nouvelle Adresse");
            rayan.getProfile().setPhone("0611223344");

            Course english = new Course("Anglais");
            rayan.addCourse(english);
            courseDAO.create(english);

            // =========================
            // Affichage final (m√©thodes existantes)
            // =========================
            displayAllStudents(studentDAO);
            displayTeacherWithCourses(teacherDAO, mrSmith.getId());

            Student rayanFromDB = studentDAO.findWithProfileAndCourses(rayan.getId());
            System.out.println("\nüë§ √âtudiant (profil + cours) : " + rayanFromDB.getName());
            System.out.println("Profil : " + rayanFromDB.getProfile().getAddress()
                    + " | " + rayanFromDB.getProfile().getPhone());
            System.out.println("Cours : " + rayanFromDB.getCourses().stream()
                    .map(Course::getTitle)
                    .collect(Collectors.joining(", ")));

            Teacher teacherFull = teacherDAO.findWithCoursesAndStudents(mrSmith.getId());
            System.out.println("\nüë®‚Äçüè´ Professeur (cours + √©tudiants) : " + teacherFull.getName());
            teacherFull.getCourses().forEach(c ->
                    System.out.println("- " + c.getTitle() + " suivi par : " +
                            c.getStudents().stream()
                                    .map(Student::getName)
                                    .collect(Collectors.joining(", ")))
            );

            // =========================
            // Tests Criteria API
            // =========================
            System.out.println("\n===== Tests Criteria API =====");

            // √âtudiants avec √¢ge > 20
            List<Student> olderStudents = studentDAO.findByAgeGreaterThan(20);
            System.out.println("\nüë¥ √âtudiants √¢g√©s de plus de 20 ans :");
            olderStudents.forEach(s ->
                    System.out.println(s.getName() + " (" + s.getAge() + " ans)")
            );

            // √âtudiants nom = "Rayan" et √¢ge >= 18
            List<Student> filteredStudents = studentDAO.findByDynamicCriteria("Rayan", 18);
            System.out.println("\nüéØ √âtudiants nomm√©s 'Rayan' avec au moins 18 ans :");
            filteredStudents.forEach(s ->
                    System.out.println(s.getName() + " (" + s.getAge() + " ans)")
            );

            // √âtudiants uniquement avec √¢ge >= 18 (nom = null)
            List<Student> onlyByAge = studentDAO.findByDynamicCriteria(null, 18);
            System.out.println("\nüìå √âtudiants avec au moins 18 ans (sans filtrer par nom) :");
            onlyByAge.forEach(s ->
                    System.out.println(s.getName() + " (" + s.getAge() + " ans)")
            );

            // √âtudiants uniquement avec nom = "Fahd" (√¢ge = null)
            List<Student> onlyByName = studentDAO.findByDynamicCriteria("Fahd", null);
            System.out.println("\nüìå √âtudiants avec le nom 'Fahd' (sans filtrer par √¢ge) :");
            onlyByName.forEach(s ->
                    System.out.println(s.getName() + " (" + s.getAge() + " ans)")
            );

            // Tous les √©tudiants (aucun crit√®re)
            List<Student> allStudentsDynamic = studentDAO.findByDynamicCriteria(null, null);
            System.out.println("\n Tous les √©tudiants (aucun crit√®re appliqu√©) :");
            allStudentsDynamic.forEach(s ->
                    System.out.println(s.getName() + " (" + s.getAge() + " ans)")
            );

            // =========================
            // Test Criteria API : √©tudiants + cours
            // =========================

            List<Student> studentsCriteria = studentDAO.findAllWithCoursesCriteria();
            System.out.println("\n Liste des √©tudiants (Criteria API)");
            for (Student s : studentsCriteria) {
                String profileInfo = (s.getProfile() != null)
                        ? s.getProfile().getAddress() + " | " + s.getProfile().getPhone()
                        : "aucun profil";
                String courses = s.getCourses().stream()
                        .map(Course::getTitle)
                        .collect(Collectors.joining(", "));
                System.out.println(s.getName() + " (Profil: " + profileInfo + ") suit : " +
                        (courses.isEmpty() ? "aucun cours" : courses));
            }

            // =========================
            // Test Criteria API : √©tudiants + profil + cours
            // =========================

            List<Student> studentsProfileCourses = studentDAO.findAllWithProfileAndCoursesCriteria();
            System.out.println("\n Liste des √©tudiants (Criteria API : profil + cours) :");
            for (Student s : studentsProfileCourses) {
                String profileInfo = (s.getProfile() != null)
                        ? s.getProfile().getAddress() + " | " + s.getProfile().getPhone()
                        : "aucun profil";
                String courses = s.getCourses().stream()
                        .map(Course::getTitle)
                        .collect(Collectors.joining(", "));
                System.out.println(s.getName() + " (Profil: " + profileInfo + ") suit : " +
                        (courses.isEmpty() ? "aucun cours" : courses));
            }

            // =========================
            // Test Criteria API dynamique : √¢ge + cours
            // =========================

            List<Student> studentsFiltered = studentDAO.findByAgeAndCourseTitle(20, "Physique");
            System.out.println("\n Etudiants de 20 ans ou + qui suivent 'Physique' :");
            studentsFiltered.forEach(s ->
                            System.out.println("- " + s.getName() + " (" + s.getAge() + " ans)")
                    );

            System.out.println(" === M√©thode filtre (Student) === ");

            // Chercher les √©tudiants qui s'appellent "Rayan"
            List<Student> result1 = studentDAO.findByFilters("Rayan", null, null);
            System.out.println("\nüéØ Etudiants qui s'appellent 'Rayan' :");
            result1.forEach(s -> System.out.println("- " + s.getName() + " (" + s.getAge() + " ans)"));

            // Chercher les √©tudiants de plus de 20,ans
            List<Student> result2 = studentDAO.findByFilters(null, 20, null);
            System.out.println("\nüéØ Etudiants de plus de 20 ans :");
            result2.forEach(s -> System.out.println("- " + s.getName() + " (" + s.getAge() + " ans)"));

            // Chercher les √©tudiants qui suivent "Physique"
            List<Student> result3 = studentDAO.findByFilters(null, null, "Physique");
            System.out.println("\nüéØ Etudiants qui suivent 'Physique' :");
            result3.forEach(s -> System.out.println("- " + s.getName() + " (" + s.getAge() + " ans)"));

            // Chercher les √©tudiants appel√©s "Rayan", de plus de 18 ans, qui suivent "Math"
            List<Student> result4 = studentDAO.findByFilters("Rayan", 18, "Maths");
            System.out.println("\nüéØ Etudiants appel√©s 'Rayan', de plus de 18 ans, qui suivent 'Maths' :");
            result4.forEach(s -> System.out.println("- " + s.getName() + " (" + s.getAge() + " ans)"));

            // =========================
            // Tests Criteria API Teacher
            // =========================

            System.out.println("\n==== Test Criteria API (Teacher) ====");

            // Rechercher prof dont le nom contient "Smith"
            List<Teacher> teachersByName = teacherDAO.findByFilters("Smith", null);
            System.out.println("\n Professeurs avec 'Smith' dans le nom :");
            teachersByName.forEach(t ->
                    System.out.println("- " + t.getName())
            );

            // Rechercher prof qui enseignent "Physique"
            List<Teacher> teachersByCourse = teacherDAO.findByFilters(null, "Physique");
            System.out.println("\n Professeurs qui enseignent 'Physique' :");
            teachersByCourse.forEach(t ->
                            System.out.println("- " + t.getName() + " enseigne : " +
                                    t.getCourses().stream()
                                            .map(Course::getTitle)
                                            .collect(Collectors.joining(", ")))
                    );

            // Rechercher professeurs appel√©s "Mr. Smith" ET qui enseignent "Maths"
            List<Teacher> teachersByNameAndCourse = teacherDAO.findByFilters("Mr. Smith", "Maths");
            System.out.println("\nüë®‚Äçüè´ Professeurs appel√©s 'Mr. Smith' qui enseignent 'Maths' :");
            teachersByNameAndCourse.forEach(t ->
                            System.out.println("- " + t.getName() + " enseigne : " +
                                    t.getCourses().stream()
                                            .map(Course::getTitle)
                                            .collect(Collectors.joining(", ")))
                    );

            // =========================
            // Test Pagination + Tri
            // =========================

            System.out.println("\n===== Pagination & Tri =====");

            List<Student> p1 = studentDAO.findPaginated(1, 2, "age", true);
            System.out.println("Page 1 (tri par √¢ge croissant) :");
            p1.forEach(s -> System.out.println("- " + s.getName() + " (" + s.getAge() + " ans)"));

            List<Student> p2 = studentDAO.findPaginated(2, 2, "age", true);
            System.out.println("üìÑ Page 2 (tri par √¢ge croissant) :");
            p2.forEach(s -> System.out.println("- " + s.getName() + " (" + s.getAge() + " ans)"));

            List<Student> pageDesc = studentDAO.findPaginated(1, 3, "name", false);
            System.out.println("üìÑ Page 1 (tri par nom d√©croissant) :");
            pageDesc.forEach(s -> System.out.println("- " + s.getName() + " (" + s.getAge() + " ans)"));

            // =========================
            // Test Group By
            // =========================

            System.out.println("\n===== Nombre d'√©tudiants par cours =====");

            List<Object[]> stats = studentDAO.countStudentsByCourse();
            for (Object[] row : stats) {
                String courseTitle = (String) row[0];
                Long studentCount = (Long) row[1];
                System.out.println("- " + courseTitle + " : " + studentCount + " √©tudiant(s)");
            }

            // =========================
            // Test Group By + HAVING (Criteria API)
            // =========================
            System.out.println("\n===== Cours avec au moins 2 √©tudiants (Criteria API + HAVING) =====");

            List<Object[]> statsHaving = studentDAO.countStudentsByCourseHaving(2);
            for (Object[] row : statsHaving) {
                String courseTitle = (String) row[0];
                Long studentCount = (Long) row[1];
                System.out.println("- " + courseTitle + " : " + studentCount + " √©tudiant(s)");
            }

            // =========================
            // Test Criteria API : √©tudiants > √¢ge moyen
            // =========================
            List<Student> olderThanAvg = studentDAO.findOlderThanAverage();
            System.out.println("\n √âtudiants plus √¢g√©s que la moyenne :");
            olderThanAvg.forEach(s ->
                    System.out.println("- " + s.getName() + " (" + s.getAge() + " ans)")
            );

            // =========================
            // Test Criteria API : pagination + tri
            // =========================

            System.out.println("\n===== Pagination des √©tudiants (page 1, taille 2) =====");
            List<Student> page1 = studentDAO.findAllPaginated(1, 2);
            page1.forEach(s -> System.out.println("- " + s.getName()));

            System.out.println("\n===== Pagination des √©tudiants (page 2, taille 2) =====");
            List<Student> page2 = studentDAO.findAllPaginated(2, 2);
            page2.forEach(s -> System.out.println("- " + s.getName()));

            // =========================
            // Test Criteria API : pagination + tri √©tudiants + cours
            // =========================

            System.out.println("\n===== Pagination avec profils + cours (page 1, taille 2) =====");
            List<Student> pag1 = studentDAO.findAllWithProfileAndCoursesPaginated(1, 2);
            for (Student s : pag1) {
                String profileInfo = (s.getProfile() != null)
                        ? s.getProfile().getAddress() + " | " + s.getProfile().getPhone()
                        : "aucun profil";
                String courses = s.getCourses().stream()
                        .map(Course::getTitle)
                        .collect(Collectors.joining(", "));
                System.out.println(s.getName() + " (Profil: " + profileInfo + ") suit : " +
                        (courses.isEmpty() ? "aucun cours" : courses));
            }

            System.out.println("\n===== Pagination avec profils + cours (page 2, taille 2) =====");
            List<Student> pag2 = studentDAO.findAllWithProfileAndCoursesPaginated(2, 2);
            pag2.forEach(s -> {
                String courses = s.getCourses().stream()
                        .map(Course::getTitle)
                        .collect(Collectors.joining(", "));
                System.out.println(s.getName() + " suit : " + (courses.isEmpty() ? "aucun cours" : courses));
            });

            // =========================
            // Test Criteria API : sous-requ√™te IN, NOT EXISTS, corr√©l√©e
            // =========================

            System.out.println("\n=== Sous-requ√™te avec IN ===");
            List<Student> taughtBySmith = studentDAO.findStudentsByTeacherName("Mr. Smith");
            taughtBySmith.forEach(s -> System.out.println("- " + s.getName()));

            System.out.println("\n=== Sous-requ√™te avec NOT EXISTS ===");
            List<Teacher> noCourses = teacherDAO.findTeachersWithoutCourses();
            noCourses.forEach(t -> System.out.println("- " + t.getName()));

            System.out.println("\n=== Sous-requ√™te corr√©l√©e ===");
            List<Student> crowdedCourses = studentDAO.findStudentsInCrowdedCourses(2);
            crowdedCourses.forEach(s -> System.out.println("- " + s.getName()));

            // =========================
            // Test des Named Queries
            // =========================

            System.out.println("\n=== Tests des Named Queries ===");

            // √âtudiants avec le nom "Rayan"
            List<Student> studentsNamedRayan = studentDAO.findByName("Rayan");
            studentsNamedRayan.forEach(s ->
                    System.out.println("üë§ √âtudiant trouv√© : " + s.getName() + ", √¢ge " + s.getAge())
            );

            // √âtudiants plus vieux que 20 ans
            List<Student> olderStudent = studentDAO.findOlderThan(20);
            olderStudent.forEach(s ->
                    System.out.println("üë¥ √âtudiant plus √¢g√© que 20 ans : " + s.getName() + " (" + s.getAge() + " ans)")
            );

            // Cours avec le nombre d‚Äô√©tudiants
            List<CourseWithCountDTO> coursesWithCounts = courseDAO.findAllWithStudentCount();
            coursesWithCounts.forEach(c ->
                    System.out.println("üìò " + c.getTitle() + " ‚Üí " + c.getStudentCount() + " √©tudiants")
            );

            //
            System.out.println("=== Cours avec au moins 2 √©tudiants ===");
            List<CourseWithCountDTO> coursesMin2 = courseDAO.findCoursesWithMinStudents(2);
            coursesMin2.forEach(System.out::println);

            System.out.println("=== Cours avec au moins 3 √©tudiants ===");
            List<CourseWithCountDTO> coursesMin3 = courseDAO.findCoursesWithMinStudents(3);
            coursesMin3.forEach(System.out::println);


            tx.commit(); // commit unique pour tout le bloc
            logger.info("üíæ Toutes les op√©rations effectu√©es avec succ√®s");

        } catch (Exception e) {
            logger.error(" Erreur, rollback en cours", e);
            if (tx.isActive()) tx.rollback();
        } finally {
            em.close();
            emf.close();
            logger.info("üßπ EntityManager ferm√©");
        }
    }

    // === Affichages utilitaires ===
    private static void displayAllStudents(StudentDAO studentDAO) {
        List<Student> students = studentDAO.findAllWithCourses();
        System.out.println("\nüìö Liste des √©tudiants :");
        for (Student s : students) {
            String profileInfo = (s.getProfile() != null)
                    ? s.getProfile().getAddress() + " | " + s.getProfile().getPhone()
                    : "aucun profil";
            String courses = s.getCourses().stream()
                    .map(Course::getTitle)
                    .collect(Collectors.joining(", "));
            System.out.println(s.getName() + " (Profil: " + profileInfo + ") suit : " +
                    (courses.isEmpty() ? "aucun cours" : courses));
        }
    }

    private static void displayTeacherWithCourses(TeacherDAO teacherDAO, Long teacherId) {
        Teacher teacher = teacherDAO.findWithCourses(teacherId);
        String courses = teacher.getCourses().stream()
                .map(Course::getTitle)
                .collect(Collectors.joining(", "));
        System.out.println("\nüë®‚Äçüè´ Professeur : " + teacher.getName());
        System.out.println("Enseigne : " + (courses.isEmpty() ? "aucun cours" : courses));
    }

    /*
    Requ√™te avec LEFT JOIN FETCH :
    SELECT DISTINCT s -> r√©cup√®re chaque Student une seule fois.
    LEFT JOIN FETCH s.courses -> r√©cup√®re les cours de chaque √©tudiant en m√™me temps, √©vitant le probl√®me N+1.
    R√©sultat : liste de Student avec leurs courses charg√©s en m√©moire.

    R√©cup√©ration et affichage des titres :
    s.getCourses().stream() -> parcourt tous les cours de l‚Äô√©tudiant.
    .map(Course::getTitle) -> extrait le titre de chaque cours.
    .reduce((a, b) -> a + ", " + b) -> concat√®ne tous les titres s√©par√©s par des virgules.
    .orElse("") -> si l‚Äô√©tudiant n‚Äôa aucun cours, renvoie une cha√Æne vide.
    System.out.println -> affiche la liste des titres.

    ================================================================

    Apr√®s modifications (ajout des cascades et suppression des m√©thodes addCourse() et addStudent()) :

    alice.getCourses().add(math);
    math.getStudents().add(alice);

    On met les 2 c√¥t√©s de la relation √† jour en m√©moire
    Hibernate va d√©tecter qu'on a modifi√© la relation
    et va g√©n√©rer les bonnes lignes dans la table de jointure student_course lors du commit().
    M√™me si on avait utilis√© tes m√©thodes addCourse / addStudent,
    le r√©sultat final dans la base de donn√©es aurait √©t√© identique.
    La diff√©rence est surtout dans la clart√© et la s√©curit√© du code.

    R√©sum√© des modifications :

    Les constructeurs personnalis√©s simplifient la cr√©ation d‚Äôobjets et rendent le code plus lisible.
    JPA/Hibernate utilise toujours le constructeur sans argument
    pour instancier les entit√©s depuis la base.
    Les changements c√¥t√© code ne changent pas le comportement final si la logique m√©tier
    et les relations sont respect√©es.

    ================================================================

    Points cl√©s

    Bidirectionnel One-to-One :
    Student garde profile_id (c√¥t√© propri√©taire).
    StudentProfile a mappedBy = "profile" pour naviguer vers l‚Äô√©tudiant.

    Liaisons mises √† jour avant persistance :
    alice.setProfile(profileAlice)
    profileAlice.setStudent(alice)

    Persistance s√©curis√©e :
    CascadeType.ALL sur le profile permet d‚Äôins√©rer le StudentProfile automatiquement.
    √âvite les NullPointerException lors de l‚Äôacc√®s √† getProfile().

    Affichage des profils et cours fonctionne correctement.

    =======================================================================

    Points importants

    Une seule transaction tx.begin() ‚Ä¶ tx.commit() pour toutes les op√©rations.

    Rollback si quelque chose √©choue.
    Les StudentProfile sont persist√©s automatiquement gr√¢ce √† cascade = CascadeType.ALL sur la relation One-to-One.

    Aucun flush() manuel n√©cessaire ici, Hibernate le fait au commit().

    =====================================================================

    On a simplifi√© les logs et les commentaires -> on garde juste l‚Äôessentiel.

    On a ajout√© profile.setStudent(student) pour bien relier les deux c√¥t√©s du OneToOne.

    On utilise tes m√©thodes utilitaires (addCourse, addCourse c√¥t√© prof) plut√¥t que de bricoler les deux c√¥t√©s √† la main.

    Avec √ßa, on devrait pouvoir voir clairement dans la console :

    chaque √©tudiant avec son profil et ses cours,

    le professeur avec ses cours.

    ======================================================================

    Points cl√©s de cette version :

    Une seule transaction tx.begin() -> tx.commit() pour tout : cr√©ation, modification et affichage.

    La persistance du nouveau cours se fait avec courseDAO.create(english)
    et JPA/Hibernate g√®re la liaison avec Rayan.

    Les m√©thodes utilitaires pour afficher √©tudiants et professeurs restent claires et r√©utilisables.

    Plus besoin de r√©cup√©rer Rayan depuis la DB avant de modifier son profil
     il est d√©j√† attach√© au EntityManager car cr√©√© dans la m√™me transaction.

    ======================================================================

    Par d√©faut :

    @ManyToOne et @OneToOne ‚Üí EAGER

    @OneToMany et @ManyToMany ‚Üí LAZY

    √áa veut dire que certaines relations sont charg√©es tout de suite
    (m√™me si tu ne les utilises pas),
    et d‚Äôautres seulement quand tu les appelles.


    Changements faits :

    Suppression des anciennes m√©thodes d‚Äôaffichage (displayAllStudents, displayTeacherWithCourses) ->
    remplac√©es par :
    displayStudentWithProfileAndCourses ‚Üí utilise studentDAO.findWithProfileAndCourses.
    displayTeacherWithCoursesAndStudents ‚Üí utilise teacherDAO.findWithCoursesAndStudents.

    Tout se fait en une seule transaction pour √©viter les probl√®mes de Lazy Loading.

    On verra en console :
    un √©tudiant (profil + liste des cours),
    un professeur (cours + √©tudiants de chaque cours).

    ==========================================================================

    Ajout de Criteria API (jakarta EE / Hibernate)

    Garde tout le flux existant (cr√©ation -> persistance -> affichages classiques)
    et ajoute √† la fin la section Test Criteria API

    On aura dans la console la liste compl√®te des √©tudiants + professeurs comme avant,
    puis les r√©sultats dynamiques via Criteria.

    Avec √ßa, la console affichera :

    Les √©tudiants > 20 ans.
    Les √©tudiants nomm√©s "Rayan" et √¢g√©s ‚â• 18 ans.
    Les √©tudiants avec au moins 18 ans (sans nom).
    Les √©tudiants nomm√©s Fahd (sans √¢ge).
    Tous les √©tudiants si tu passes null, null.

    ============================================================================

    Test Criteria API : √©tudiants + cours :

    Ce que √ßa fait :

    Hibernate construit une requ√™te SQL unique pour r√©cup√©rer les √©tudiants
    et leurs cours.

    Chaque √©tudiant appara√Æt une seule fois gr√¢ce √† distinct(true).

    On √©vite le Lazy Loading multiple et le probl√®me N+1.

    Tu peux comparer le r√©sultat avec ton ancienne m√©thode JPQL findAllWithCourses() :
    le r√©sultat sera identique,
    mais la requ√™te est construite dynamiquement.

    */
}