package fr.eliess.model;

import fr.eliess.dto.CourseWithCountDTO;
import jakarta.persistence.*;
import lombok.*;

import java.util.HashSet;
import java.util.Set;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString(exclude = {"students", "teacher"})
/* g√©n√®re automatiquement une m√©thode toString() pour la classe
exclude = "students" : n'inclut pas les champs students dans le toString()
pour √©viter les boucles infinies dans les relations bidirectionnelles (Student <--> Course)
*/
@NamedNativeQueries({
        @NamedNativeQuery(
                name = "Course.findAllWithStudentCount",
                query = "SELECT c.id, c.title, COUNT(sc.student_id) AS student_count " +
                        "FROM Course c " +
                        "LEFT JOIN student_course sc ON c.id = sc.course_id " +
                        "GROUP BY c.id, c.title",
                resultSetMapping = "CourseWithCountMapping"
        ),
        @NamedNativeQuery(
                name = "Course.findCoursesWithMinStudents",
                query = "SELECT c.id, c.title, COUNT(sc.student_id) AS student_count " + // üëà alias coh√©rent
                        "FROM Course c " +
                        "LEFT JOIN student_course sc ON c.id = sc.course_id " +
                        "GROUP BY c.id, c.title " +
                        "HAVING COUNT(sc.student_id) >= :minCount",
                resultSetMapping = "CourseWithCountMapping" // üëà r√©utilisation du m√™me mapping
        )
})
@SqlResultSetMapping(
        name = "CourseWithCountMapping",
        classes = @ConstructorResult(
                targetClass = CourseWithCountDTO.class,
                columns = {
                        @ColumnResult(name = "id", type = Long.class),
                        @ColumnResult(name = "title", type = String.class),
                        @ColumnResult(name = "student_count", type = Long.class) // üëà alias uniforme
                }
        )
)
public class Course {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @ManyToMany(mappedBy = "courses", fetch = FetchType.LAZY) // indique que l'autre c√¥t√© de la relation poss√®de la vraie cl√© √©trang√®re
    private Set<Student> students = new HashSet<>();
    // Ici, Student a courses et Course a students. Le champ students dans Course est le propri√©taire de la relation.

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "teacher_id") // foreign key DB
    private Teacher teacher;

    public Course(String title) {
        this.title = title;
    }


    public void addStudent(Student student) {
        if (students.add(student)) {
            student.getCourses().add(this);
        }
    }

    /*

    Ici on utilise :

    @NamedNativeQuery pour d√©finir la requ√™te SQL native.

    @SqlResultSetMapping pour mapper le r√©sultat dans un DTO.

    =====================================================================

    Explication :

    @NamedNativeQuery :

    Permet de d√©finir une requ√™te SQL native, pas du JPQL.

    Ici, on veut r√©cup√©rer chaque cours + nombre d‚Äô√©tudiants (COUNT + GROUP BY).

    name -> identifiant unique.
    query -> la requ√™te SQL exacte.

    resultSetMapping -> indique comment convertir
    le r√©sultat SQL en objet Java.

    @SqlResultSetMapping :

    D√©finit la correspondance entre le r√©sultat SQL et un DTO Java.

    @ConstructorResult -> cr√©e directement un objet
    CourseWithCountDTO √† partir des colonnes SQL.

    columns -> chaque colonne SQL
    correspond √† un type et √† un argument du constructeur du DTO.

    Exemple concret :

    List<CourseWithCountDTO> courses = em.createNamedQuery("Course.findAllWithStudentCount", CourseWithCountDTO.class)
                                        .getResultList();

    Hibernate va ex√©cuter le SQL :

    SELECT c.id, c.title, COUNT(sc.student_id) AS student_count
    FROM course c
    LEFT JOIN student_course sc ON c.id = sc.course_id
    GROUP BY c.id, c.title;

    Avantages de ces nouvelles impl√©mentations

    Centralisation et r√©utilisabilit√© :

    Plus besoin de r√©√©crire la m√™me requ√™te dans tous tes DAO ou services.

    S√©curit√© :

    Les param√®tres dynamiques (:name, :age)
    r√©duisent le risque d‚Äôinjection SQL.

    Lisibilit√© :

    Les requ√™tes sont d√©clar√©es directement dans l‚Äôentit√©,
    on sait exactement ce que fait l‚Äôentit√© c√¥t√© DB.

    Performance :

    Hibernate pr√©pare les NamedQuery d√®s le d√©marrage,
    ce qui peut am√©liorer les temps d‚Äôex√©cution.

    Interop√©rabilit√© avec DTO :

    Pour des rapports ou calculs (COUNT, GROUP BY),
    on peut directement utiliser des DTO sans surcharger les entit√©s.

    */

}
